= vim

== Resources

// Ex commands
http://vimdoc.sourceforge.net/htmldoc/vimindex.html

////
Notes:
  [n] is usually for a digit/number
  [L-] is for a leader combination, by default the comma key ','
  [C-] is for a CTRL- keys combination
  [A-] is for an ALT- keys combination
  [S-] is for a SHIFT keys combination
  [ESC] is for the ESCAPE key
  [TAB] is for the tabulation key
  [MOTION] is for a motion (go to end of file, next paragraph, next line, left, etc.)
  [visual], [normal], ... is for vim modes in which the command works (by default normal)
////

== Commands

=== General

:sh                 Launch a shell, and once exited go back to vim
:! [cmd]            Run [cmd] in the shell
:10,15 ! sha512sum
    => use lines 10 to 15 as input for "sha512sum" external command, and replace them with the output of that command
ga                  Indicates information about the char under the cursor (hex code, etc.)
V [select lines] 0 [C-v] I # <ESC>
    => adds a # in front of all selected lines
0d[C-v]}            Delete the first character of all lines up to the end of the paragraph
0dv }               Delete all the lines from the current one to the end of the paragraph
[n][C-a]            Adds [n] to current number under cursor
[n][C-x]            Substracts [n] to current number under cursor
di"                 Remove all the content inside the current double quote string the cursor is in, but keep the quotes
da"                 Idem, but remove the quotes as well
daW                 Remove the current WORD under the cursor
di(                 Remove the inner content of the current parenthesis block
i[C-v][TAB]         Insert a real TAB, ignoring expandtab option
                        [C-v] in insert mode is for "insert literal copy of next character")

[select text] meomsv`ea"[ESC]`si"[ESC]
                    Add double quotes around the selected text:
                        - sets a marker "e" at the current location: "me"
                        - move to other side of selection: "o"
                        - set a marker "s" there: "ms"
                        - quit visual mode: "v"
                        - go to marker "e": "`e"
                        - append a quote: a"[ESC]
                        - go to marker "s"
                        - insert a quote: i"[ESC]

:%!xxd              Hexadecimal display
:%!xxd -r           Revert to text mode
:%normal A;         Insert a ";" at the end of all lines

=== Copy and move

:2,8co15            Copy lines 2 through 8 after line 15
:4,15t$             Copy lines 4 through 15 to end of document (t == co)
:-t$                Copy previous line to end of document
:m0                 Move current line to line 0 (i.e. the top of the document)
:.,+3m$-1           Current line through current+3 are moved to the lastLine-1 (i.e. next to last)

=== Format

>>                  Indent line
<<                  Un-indent line
V [select lines]>   Indent selection
V [select lines]<   Un-indent selection
[C-t]               Indent current line in insert mode
[C-d]               Unindent current line in insert mode

===  Search and replace

:%s/old/new/g       Replace all occurences of old by new in the file
:%s/old/new/gc      Replace all occurences of old by new in the file but ask before each change
:%s/\%x85/\t/g     Replace 0x85 character with a tab in the file
V [select lines]:s/a/b/
    Replace first "a" in each selected line with "b"
:/^include/+1,$-1s#if#oops#g
    Replace all occurences of "if" with "oops" from the line following the next line containing "include" (from cursor), up to the line before the last one
:4,/this line/:s/a/A/g
    Replace all "a" with "A" starting from line 4 up to first line containing "this line" after the cursor
:4;/this line/:s/a/A/g
    Exactly the same command as before, but with "," replaced by ";"
    Replace all "a" with "A" starting from line 4 up to first line containing "this line" after the line 4
    ";" sets the "current line" to be the one found to be the start of the range, and not the cursor anymore
[I
    Lists all lines in open buffers that contain the word under cursor
:s/Copyright \zs2007\ze All Rights Reserved/2008/
    Change 2007 to 2008 in this specific sentence, through the whole document

=== Global editing

:g/[pattern]/d      Delete all lines matching [pattern]
:g!/[pattern]/d     Delete all lines NOT matching [pattern]
:v/[pattern]/d      (idem)
:g/[pattern]/d 2    Delete 2 lines starting from any line matching [pattern]
:g/pattern/t$       Copy all lines matching a pattern to end of file.
:g/pattern/m$       Move all lines matching a pattern to end of file.
:g/pattern/exe "normal! [commands]" Execute a set of VIM commands for each line matchin a pattern


=== Navigation

[n]*                Search forward for the Nth occurrence of the ident under the cursor
[n]#                Search backward for the Nth occurrence of the ident under the cursor
[n]$                Cursor to the end of Nth next line
%                   On a parenthesis, go to the corresponding other one

:Vex                Create new split windows (vertical), with a file explorer in it (to select new file to edit in the new windows)
:Sex                Create new split windows (horizontal), with a file explorer in it (to select new file to edit in the new windows)

[n]g;               Go to [n] older position in change list.
[n]g,               Go to [n] newer position in change list.
}                   Go to next blank line
{                   Go to previous blank line

]]                  Go to next top-level function/class definition start
]]                  Go to previous top-level function/class definition start
]m                  Go to next funtion/class/method definition start
[m                  Go to previous funtion/class/method definition start

[n]w                Cursor N words forward
[n]b                Cursor N words backward
[n]e                Cursor end of N words forward
    => words = sequence of letters, digits and underscores, or a sequence of other non-blank characters, separated with white space
[n]W                Cursor N WORDS forward
[n]B                Cursor N WORDS backward
[n]E                Cursor end of N WORDS
    => WORDS = sequence of non-blank characters, separated with white space

0                   Go to beginning of the line
$                   Go to end of the line
+                   Go to the beginning of next line (first non-blank char)
-                   Go to the beginning of previous line (first non-blank char)
_                   Go to the beginning of current line (first non-blank char)
[n]gg               Go to the beginning of nth line (first non-blank char), default first one
[n]G                Go to the beginning of nth line (first non-blank char), default last one
f[char]             Go to next [char] on the current line, cursor on the character
F[char]             Go to previous [char] on the current line, cursor on the character
                        Note: t/T does the same but with previous characters on the line

[[                  Jump on previous class or function (normal, visual, operator modes)
]]                  Jump on next class or function (normal, visual, operator modes)
[M                  Jump on previous class or method (normal, visual, operator modes)
]M                  Jump on next class or method (normal, visual, operator modes)


[C-o]               Jump back to the previous location in jumplist
[C-i]               Jump forward to netx location in jumplist

=== Editing

o                   Start insert mode on a new line, right after the current one
O                   Start insert mode on a new line, right before the current one
[visual] [C-o]      Use an :ex command in insert mode, and then go back in insert mode
[C-n]               Autocompletion based on open buffers (and [C-p] to go to previous completion)

=== Changes

u                   Undo last change
[C-R]               Undo last undo
.                   Repeat last operation ("redo")
[n]@:               Repeat last :ex command [n] times

=== Macros

q[letter][whatever]q
                    Record a macro in register [letter] (all keystrikes)
[n]@[letter]
                    Replay macro of register [letter]


=== Buffers

:ls                 List all buffers
:b[n]               Switch to buffer number [n]
:bn                 Go to next buffer
:bp                 Go to previous buffer
:[n]b               Go to [n]th buffer
:b#                 Back to previously active buffer
:bd                 Remove buffer


=== Split

:sp                 create horizontal split
:vsp                create vertical split

[C-w] h             go left split
[C-w] j             go up split
[C-w] k             go down split
[C-w] l             go right spit

[C-w] =             normalize split sizes

[C-w][n]-           [n] lines less for the split
[C-w][n]+           [n] lines more for the split
[C-w][n]<           [n] columns less for the split
[C-w][n]>           [n] columns more for the split

[C-w]c              close current split
[C-w]w              Switch to next split


=== Wildmenu

enabled in conf, allows to use <up> <down> <right> <left> for navigation in folders/files, and <tab> completion

### Copy and paste

[cursor to beginning] v [cursor to end] y [cursor to target] P
    Copy a block and paste it after the cursor
    Notes:
        * 'V' instead of 'v' to select whole lines
        * 'd' instead of 'y' to cut
        * 'p' insteand of 'P' to paster after cursor

"*yy                Copy current line to the system selection buffer (middle-click stuff usually)
"+yy                Copy current line to the system cut buffer ('clipboard')

### diff
]c                  Go to next diff
[c                  Go to previous diff
do                  Get changes from other window
dp                  Put changes to other window
:diffupdate         Refresh diff

=== Gitglutter plugin

<L> hr              Revert current hunk git changes
<L> hs              Stage current hunk git changes
]c                  Go to next diff
[c                  Go to previous diff

=== tcomment_vim plugin

gc[MOTION]          Toggle comments on motion
[visual]gc          Toggle comments on selection
[C-_][C-_]          Toggle comments on current line
[C-_]p              Comment the current inner paragraph

=== Operators

    |c| c   change
    |d| d   delete
    |y| y   yank into register (does not change the text)
    |~| ~   swap case (only if 'tildeop' is set)
    |g~|    g~  swap case
    |gu|    gu  make lowercase
    |gU|    gU  make uppercase
    |!| !   filter through an external program
    |=| =   filter through 'equalprg' or C-indenting if empty
    |gq|    gq  text formatting
    |g?|    g?  ROT13 encoding
    |>| >   shift right
    |<| <   shift left
    |zf|    zf  define a fold
    |g@|    g@      call function set with the 'operatorfunc' option

== Misc

FORCING A MOTION TO BE LINEWISE, CHARACTERWISE OR BLOCKWISE

When a motion is not of the type you would like to use, you can force another
type by using "v", "V" or CTRL-V just after the operator.
Example:
    dj
deletes two lines
    dvj
deletes from the cursor position until the character below the cursor
    d[C-v]j
deletes the character under the cursor and the character below the cursor.

Be careful with forcing a linewise movement to be used characterwise or
blockwise, the column may not always be defined.


                            *o_v*
v       When used after an operator, before the motion command: Force
        the operator to work characterwise, also when the motion is
        linewise.  If the motion was linewise, it will become
        |exclusive|.
        If the motion already was characterwise, toggle
        inclusive/exclusive.  This can be used to make an exclusive
        motion inclusive and an inclusive motion exclusive.


                            *o_V*
V       When used after an operator, before the motion command: Force
        the operator to work linewise, also when the motion is
        characterwise.


                            *o_CTRL-V*
CTRL-V      When used after an operator, before the motion command: Force
        the operator to work blockwise.  This works like Visual block
        mode selection, with the corners defined by the cursor
        position before and after the motion.
